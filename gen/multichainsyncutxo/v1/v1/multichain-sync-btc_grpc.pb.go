// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: multichainsyncutxo/v1/multichain-sync-btc.proto

package protov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MultiChainSyncUtXoService_BusinessRegister_FullMethodName            = "/proto.v1.MultiChainSyncUtXoService/businessRegister"
	MultiChainSyncUtXoService_ExportAddressesByPublicKeys_FullMethodName = "/proto.v1.MultiChainSyncUtXoService/exportAddressesByPublicKeys"
	MultiChainSyncUtXoService_BuildUnSignTransaction_FullMethodName      = "/proto.v1.MultiChainSyncUtXoService/buildUnSignTransaction"
	MultiChainSyncUtXoService_BuildSignedTransaction_FullMethodName      = "/proto.v1.MultiChainSyncUtXoService/buildSignedTransaction"
)

// MultiChainSyncUtXoServiceClient is the client API for MultiChainSyncUtXoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiChainSyncUtXoServiceClient interface {
	BusinessRegister(ctx context.Context, in *BusinessRegisterRequest, opts ...grpc.CallOption) (*BusinessRegisterResponse, error)
	ExportAddressesByPublicKeys(ctx context.Context, in *ExportAddressesRequest, opts ...grpc.CallOption) (*ExportAddressesResponse, error)
	BuildUnSignTransaction(ctx context.Context, in *UnSignWithdrawTransactionRequest, opts ...grpc.CallOption) (*UnSignWithdrawTransactionResponse, error)
	BuildSignedTransaction(ctx context.Context, in *SignedWithdrawTransactionRequest, opts ...grpc.CallOption) (*SignedWithdrawTransactionResponse, error)
}

type multiChainSyncUtXoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiChainSyncUtXoServiceClient(cc grpc.ClientConnInterface) MultiChainSyncUtXoServiceClient {
	return &multiChainSyncUtXoServiceClient{cc}
}

func (c *multiChainSyncUtXoServiceClient) BusinessRegister(ctx context.Context, in *BusinessRegisterRequest, opts ...grpc.CallOption) (*BusinessRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BusinessRegisterResponse)
	err := c.cc.Invoke(ctx, MultiChainSyncUtXoService_BusinessRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiChainSyncUtXoServiceClient) ExportAddressesByPublicKeys(ctx context.Context, in *ExportAddressesRequest, opts ...grpc.CallOption) (*ExportAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportAddressesResponse)
	err := c.cc.Invoke(ctx, MultiChainSyncUtXoService_ExportAddressesByPublicKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiChainSyncUtXoServiceClient) BuildUnSignTransaction(ctx context.Context, in *UnSignWithdrawTransactionRequest, opts ...grpc.CallOption) (*UnSignWithdrawTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnSignWithdrawTransactionResponse)
	err := c.cc.Invoke(ctx, MultiChainSyncUtXoService_BuildUnSignTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiChainSyncUtXoServiceClient) BuildSignedTransaction(ctx context.Context, in *SignedWithdrawTransactionRequest, opts ...grpc.CallOption) (*SignedWithdrawTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedWithdrawTransactionResponse)
	err := c.cc.Invoke(ctx, MultiChainSyncUtXoService_BuildSignedTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiChainSyncUtXoServiceServer is the server API for MultiChainSyncUtXoService service.
// All implementations must embed UnimplementedMultiChainSyncUtXoServiceServer
// for forward compatibility.
type MultiChainSyncUtXoServiceServer interface {
	BusinessRegister(context.Context, *BusinessRegisterRequest) (*BusinessRegisterResponse, error)
	ExportAddressesByPublicKeys(context.Context, *ExportAddressesRequest) (*ExportAddressesResponse, error)
	BuildUnSignTransaction(context.Context, *UnSignWithdrawTransactionRequest) (*UnSignWithdrawTransactionResponse, error)
	BuildSignedTransaction(context.Context, *SignedWithdrawTransactionRequest) (*SignedWithdrawTransactionResponse, error)
	mustEmbedUnimplementedMultiChainSyncUtXoServiceServer()
}

// UnimplementedMultiChainSyncUtXoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMultiChainSyncUtXoServiceServer struct{}

func (UnimplementedMultiChainSyncUtXoServiceServer) BusinessRegister(context.Context, *BusinessRegisterRequest) (*BusinessRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessRegister not implemented")
}
func (UnimplementedMultiChainSyncUtXoServiceServer) ExportAddressesByPublicKeys(context.Context, *ExportAddressesRequest) (*ExportAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAddressesByPublicKeys not implemented")
}
func (UnimplementedMultiChainSyncUtXoServiceServer) BuildUnSignTransaction(context.Context, *UnSignWithdrawTransactionRequest) (*UnSignWithdrawTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildUnSignTransaction not implemented")
}
func (UnimplementedMultiChainSyncUtXoServiceServer) BuildSignedTransaction(context.Context, *SignedWithdrawTransactionRequest) (*SignedWithdrawTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildSignedTransaction not implemented")
}
func (UnimplementedMultiChainSyncUtXoServiceServer) mustEmbedUnimplementedMultiChainSyncUtXoServiceServer() {
}
func (UnimplementedMultiChainSyncUtXoServiceServer) testEmbeddedByValue() {}

// UnsafeMultiChainSyncUtXoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiChainSyncUtXoServiceServer will
// result in compilation errors.
type UnsafeMultiChainSyncUtXoServiceServer interface {
	mustEmbedUnimplementedMultiChainSyncUtXoServiceServer()
}

func RegisterMultiChainSyncUtXoServiceServer(s grpc.ServiceRegistrar, srv MultiChainSyncUtXoServiceServer) {
	// If the following call pancis, it indicates UnimplementedMultiChainSyncUtXoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MultiChainSyncUtXoService_ServiceDesc, srv)
}

func _MultiChainSyncUtXoService_BusinessRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiChainSyncUtXoServiceServer).BusinessRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiChainSyncUtXoService_BusinessRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiChainSyncUtXoServiceServer).BusinessRegister(ctx, req.(*BusinessRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiChainSyncUtXoService_ExportAddressesByPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiChainSyncUtXoServiceServer).ExportAddressesByPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiChainSyncUtXoService_ExportAddressesByPublicKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiChainSyncUtXoServiceServer).ExportAddressesByPublicKeys(ctx, req.(*ExportAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiChainSyncUtXoService_BuildUnSignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSignWithdrawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiChainSyncUtXoServiceServer).BuildUnSignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiChainSyncUtXoService_BuildUnSignTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiChainSyncUtXoServiceServer).BuildUnSignTransaction(ctx, req.(*UnSignWithdrawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiChainSyncUtXoService_BuildSignedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedWithdrawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiChainSyncUtXoServiceServer).BuildSignedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiChainSyncUtXoService_BuildSignedTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiChainSyncUtXoServiceServer).BuildSignedTransaction(ctx, req.(*SignedWithdrawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiChainSyncUtXoService_ServiceDesc is the grpc.ServiceDesc for MultiChainSyncUtXoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiChainSyncUtXoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.MultiChainSyncUtXoService",
	HandlerType: (*MultiChainSyncUtXoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "businessRegister",
			Handler:    _MultiChainSyncUtXoService_BusinessRegister_Handler,
		},
		{
			MethodName: "exportAddressesByPublicKeys",
			Handler:    _MultiChainSyncUtXoService_ExportAddressesByPublicKeys_Handler,
		},
		{
			MethodName: "buildUnSignTransaction",
			Handler:    _MultiChainSyncUtXoService_BuildUnSignTransaction_Handler,
		},
		{
			MethodName: "buildSignedTransaction",
			Handler:    _MultiChainSyncUtXoService_BuildSignedTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multichainsyncutxo/v1/multichain-sync-btc.proto",
}
