// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sign/v1/sign.proto

package signv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SignService_GetSupportSignWay_FullMethodName   = "/sign.v1.SignService/getSupportSignWay"
	SignService_ExportPublicKeyList_FullMethodName = "/sign.v1.SignService/exportPublicKeyList"
	SignService_SignTxMessage_FullMethodName       = "/sign.v1.SignService/signTxMessage"
)

// SignServiceClient is the client API for SignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignServiceClient interface {
	GetSupportSignWay(ctx context.Context, in *SupportSignWayRequest, opts ...grpc.CallOption) (*SupportSignWayResponse, error)
	ExportPublicKeyList(ctx context.Context, in *ExportPublicKeyRequest, opts ...grpc.CallOption) (*ExportPublicKeyResponse, error)
	SignTxMessage(ctx context.Context, in *SignTxMessageRequest, opts ...grpc.CallOption) (*SignTxMessageResponse, error)
}

type signServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignServiceClient(cc grpc.ClientConnInterface) SignServiceClient {
	return &signServiceClient{cc}
}

func (c *signServiceClient) GetSupportSignWay(ctx context.Context, in *SupportSignWayRequest, opts ...grpc.CallOption) (*SupportSignWayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupportSignWayResponse)
	err := c.cc.Invoke(ctx, SignService_GetSupportSignWay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signServiceClient) ExportPublicKeyList(ctx context.Context, in *ExportPublicKeyRequest, opts ...grpc.CallOption) (*ExportPublicKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportPublicKeyResponse)
	err := c.cc.Invoke(ctx, SignService_ExportPublicKeyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signServiceClient) SignTxMessage(ctx context.Context, in *SignTxMessageRequest, opts ...grpc.CallOption) (*SignTxMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignTxMessageResponse)
	err := c.cc.Invoke(ctx, SignService_SignTxMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignServiceServer is the server API for SignService service.
// All implementations must embed UnimplementedSignServiceServer
// for forward compatibility.
type SignServiceServer interface {
	GetSupportSignWay(context.Context, *SupportSignWayRequest) (*SupportSignWayResponse, error)
	ExportPublicKeyList(context.Context, *ExportPublicKeyRequest) (*ExportPublicKeyResponse, error)
	SignTxMessage(context.Context, *SignTxMessageRequest) (*SignTxMessageResponse, error)
	mustEmbedUnimplementedSignServiceServer()
}

// UnimplementedSignServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSignServiceServer struct{}

func (UnimplementedSignServiceServer) GetSupportSignWay(context.Context, *SupportSignWayRequest) (*SupportSignWayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportSignWay not implemented")
}
func (UnimplementedSignServiceServer) ExportPublicKeyList(context.Context, *ExportPublicKeyRequest) (*ExportPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportPublicKeyList not implemented")
}
func (UnimplementedSignServiceServer) SignTxMessage(context.Context, *SignTxMessageRequest) (*SignTxMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTxMessage not implemented")
}
func (UnimplementedSignServiceServer) mustEmbedUnimplementedSignServiceServer() {}
func (UnimplementedSignServiceServer) testEmbeddedByValue()                     {}

// UnsafeSignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignServiceServer will
// result in compilation errors.
type UnsafeSignServiceServer interface {
	mustEmbedUnimplementedSignServiceServer()
}

func RegisterSignServiceServer(s grpc.ServiceRegistrar, srv SignServiceServer) {
	// If the following call pancis, it indicates UnimplementedSignServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SignService_ServiceDesc, srv)
}

func _SignService_GetSupportSignWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportSignWayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).GetSupportSignWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignService_GetSupportSignWay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).GetSupportSignWay(ctx, req.(*SupportSignWayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignService_ExportPublicKeyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).ExportPublicKeyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignService_ExportPublicKeyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).ExportPublicKeyList(ctx, req.(*ExportPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignService_SignTxMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTxMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).SignTxMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignService_SignTxMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).SignTxMessage(ctx, req.(*SignTxMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SignService_ServiceDesc is the grpc.ServiceDesc for SignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sign.v1.SignService",
	HandlerType: (*SignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getSupportSignWay",
			Handler:    _SignService_GetSupportSignWay_Handler,
		},
		{
			MethodName: "exportPublicKeyList",
			Handler:    _SignService_ExportPublicKeyList_Handler,
		},
		{
			MethodName: "signTxMessage",
			Handler:    _SignService_SignTxMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sign/v1/sign.proto",
}
