// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: sign/v1/sign.proto

package signv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReturnCode int32

const (
	ReturnCode_ERROR   ReturnCode = 0
	ReturnCode_SUCCESS ReturnCode = 1
)

// Enum value maps for ReturnCode.
var (
	ReturnCode_name = map[int32]string{
		0: "ERROR",
		1: "SUCCESS",
	}
	ReturnCode_value = map[string]int32{
		"ERROR":   0,
		"SUCCESS": 1,
	}
)

func (x ReturnCode) Enum() *ReturnCode {
	p := new(ReturnCode)
	*p = x
	return p
}

func (x ReturnCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnCode) Descriptor() protoreflect.EnumDescriptor {
	return file_sign_v1_sign_proto_enumTypes[0].Descriptor()
}

func (ReturnCode) Type() protoreflect.EnumType {
	return &file_sign_v1_sign_proto_enumTypes[0]
}

func (x ReturnCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnCode.Descriptor instead.
func (ReturnCode) EnumDescriptor() ([]byte, []int) {
	return file_sign_v1_sign_proto_rawDescGZIP(), []int{0}
}

type PublicKey struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CompressPubkey string                 `protobuf:"bytes,1,opt,name=compress_pubkey,json=compressPubkey,proto3" json:"compress_pubkey,omitempty"`
	Pubkey         string                 `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	mi := &file_sign_v1_sign_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1_sign_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_sign_v1_sign_proto_rawDescGZIP(), []int{0}
}

func (x *PublicKey) GetCompressPubkey() string {
	if x != nil {
		return x.CompressPubkey
	}
	return ""
}

func (x *PublicKey) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

type SupportSignWayRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConsumerToken string                 `protobuf:"bytes,1,opt,name=consumer_token,json=consumerToken,proto3" json:"consumer_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SupportSignWayRequest) Reset() {
	*x = SupportSignWayRequest{}
	mi := &file_sign_v1_sign_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupportSignWayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportSignWayRequest) ProtoMessage() {}

func (x *SupportSignWayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1_sign_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportSignWayRequest.ProtoReflect.Descriptor instead.
func (*SupportSignWayRequest) Descriptor() ([]byte, []int) {
	return file_sign_v1_sign_proto_rawDescGZIP(), []int{1}
}

func (x *SupportSignWayRequest) GetConsumerToken() string {
	if x != nil {
		return x.ConsumerToken
	}
	return ""
}

type SignWay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schema        string                 `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignWay) Reset() {
	*x = SignWay{}
	mi := &file_sign_v1_sign_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignWay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignWay) ProtoMessage() {}

func (x *SignWay) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1_sign_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignWay.ProtoReflect.Descriptor instead.
func (*SignWay) Descriptor() ([]byte, []int) {
	return file_sign_v1_sign_proto_rawDescGZIP(), []int{2}
}

func (x *SignWay) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

type SupportSignWayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ReturnCode             `protobuf:"varint,1,opt,name=Code,proto3,enum=sign.v1.ReturnCode" json:"Code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	SignWay       []*SignWay             `protobuf:"bytes,3,rep,name=sign_way,json=signWay,proto3" json:"sign_way,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SupportSignWayResponse) Reset() {
	*x = SupportSignWayResponse{}
	mi := &file_sign_v1_sign_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupportSignWayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportSignWayResponse) ProtoMessage() {}

func (x *SupportSignWayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1_sign_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportSignWayResponse.ProtoReflect.Descriptor instead.
func (*SupportSignWayResponse) Descriptor() ([]byte, []int) {
	return file_sign_v1_sign_proto_rawDescGZIP(), []int{3}
}

func (x *SupportSignWayResponse) GetCode() ReturnCode {
	if x != nil {
		return x.Code
	}
	return ReturnCode_ERROR
}

func (x *SupportSignWayResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SupportSignWayResponse) GetSignWay() []*SignWay {
	if x != nil {
		return x.SignWay
	}
	return nil
}

type ExportPublicKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConsumerToken string                 `protobuf:"bytes,1,opt,name=consumer_token,json=consumerToken,proto3" json:"consumer_token,omitempty"`
	// CryptoType
	Type          string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Number        uint64 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportPublicKeyRequest) Reset() {
	*x = ExportPublicKeyRequest{}
	mi := &file_sign_v1_sign_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportPublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPublicKeyRequest) ProtoMessage() {}

func (x *ExportPublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1_sign_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPublicKeyRequest.ProtoReflect.Descriptor instead.
func (*ExportPublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_sign_v1_sign_proto_rawDescGZIP(), []int{4}
}

func (x *ExportPublicKeyRequest) GetConsumerToken() string {
	if x != nil {
		return x.ConsumerToken
	}
	return ""
}

func (x *ExportPublicKeyRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExportPublicKeyRequest) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type ExportPublicKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ReturnCode             `protobuf:"varint,1,opt,name=Code,proto3,enum=sign.v1.ReturnCode" json:"Code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PublicKey     []*PublicKey           `protobuf:"bytes,3,rep,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportPublicKeyResponse) Reset() {
	*x = ExportPublicKeyResponse{}
	mi := &file_sign_v1_sign_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportPublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPublicKeyResponse) ProtoMessage() {}

func (x *ExportPublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1_sign_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPublicKeyResponse.ProtoReflect.Descriptor instead.
func (*ExportPublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_sign_v1_sign_proto_rawDescGZIP(), []int{5}
}

func (x *ExportPublicKeyResponse) GetCode() ReturnCode {
	if x != nil {
		return x.Code
	}
	return ReturnCode_ERROR
}

func (x *ExportPublicKeyResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ExportPublicKeyResponse) GetPublicKey() []*PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type SignTxMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConsumerToken string                 `protobuf:"bytes,1,opt,name=consumer_token,json=consumerToken,proto3" json:"consumer_token,omitempty"`
	// CryptoType
	Type          string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	PublicKey     string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	MessageHash   string `protobuf:"bytes,4,opt,name=message_hash,json=messageHash,proto3" json:"message_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignTxMessageRequest) Reset() {
	*x = SignTxMessageRequest{}
	mi := &file_sign_v1_sign_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignTxMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTxMessageRequest) ProtoMessage() {}

func (x *SignTxMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1_sign_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTxMessageRequest.ProtoReflect.Descriptor instead.
func (*SignTxMessageRequest) Descriptor() ([]byte, []int) {
	return file_sign_v1_sign_proto_rawDescGZIP(), []int{6}
}

func (x *SignTxMessageRequest) GetConsumerToken() string {
	if x != nil {
		return x.ConsumerToken
	}
	return ""
}

func (x *SignTxMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SignTxMessageRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *SignTxMessageRequest) GetMessageHash() string {
	if x != nil {
		return x.MessageHash
	}
	return ""
}

type SignTxMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ReturnCode             `protobuf:"varint,1,opt,name=Code,proto3,enum=sign.v1.ReturnCode" json:"Code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Signature     string                 `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignTxMessageResponse) Reset() {
	*x = SignTxMessageResponse{}
	mi := &file_sign_v1_sign_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignTxMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTxMessageResponse) ProtoMessage() {}

func (x *SignTxMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1_sign_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTxMessageResponse.ProtoReflect.Descriptor instead.
func (*SignTxMessageResponse) Descriptor() ([]byte, []int) {
	return file_sign_v1_sign_proto_rawDescGZIP(), []int{7}
}

func (x *SignTxMessageResponse) GetCode() ReturnCode {
	if x != nil {
		return x.Code
	}
	return ReturnCode_ERROR
}

func (x *SignTxMessageResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SignTxMessageResponse) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

var File_sign_v1_sign_proto protoreflect.FileDescriptor

const file_sign_v1_sign_proto_rawDesc = "" +
	"\n" +
	"\x12sign/v1/sign.proto\x12\asign.v1\"L\n" +
	"\tPublicKey\x12'\n" +
	"\x0fcompress_pubkey\x18\x01 \x01(\tR\x0ecompressPubkey\x12\x16\n" +
	"\x06pubkey\x18\x02 \x01(\tR\x06pubkey\">\n" +
	"\x15SupportSignWayRequest\x12%\n" +
	"\x0econsumer_token\x18\x01 \x01(\tR\rconsumerToken\"!\n" +
	"\aSignWay\x12\x16\n" +
	"\x06schema\x18\x01 \x01(\tR\x06schema\"\x80\x01\n" +
	"\x16SupportSignWayResponse\x12'\n" +
	"\x04Code\x18\x01 \x01(\x0e2\x13.sign.v1.ReturnCodeR\x04Code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12+\n" +
	"\bsign_way\x18\x03 \x03(\v2\x10.sign.v1.SignWayR\asignWay\"k\n" +
	"\x16ExportPublicKeyRequest\x12%\n" +
	"\x0econsumer_token\x18\x01 \x01(\tR\rconsumerToken\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x16\n" +
	"\x06number\x18\x03 \x01(\x04R\x06number\"\x87\x01\n" +
	"\x17ExportPublicKeyResponse\x12'\n" +
	"\x04Code\x18\x01 \x01(\x0e2\x13.sign.v1.ReturnCodeR\x04Code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x121\n" +
	"\n" +
	"public_key\x18\x03 \x03(\v2\x12.sign.v1.PublicKeyR\tpublicKey\"\x93\x01\n" +
	"\x14SignTxMessageRequest\x12%\n" +
	"\x0econsumer_token\x18\x01 \x01(\tR\rconsumerToken\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x1d\n" +
	"\n" +
	"public_key\x18\x03 \x01(\tR\tpublicKey\x12!\n" +
	"\fmessage_hash\x18\x04 \x01(\tR\vmessageHash\"p\n" +
	"\x15SignTxMessageResponse\x12'\n" +
	"\x04Code\x18\x01 \x01(\x0e2\x13.sign.v1.ReturnCodeR\x04Code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\tR\tsignature*$\n" +
	"\n" +
	"ReturnCode\x12\t\n" +
	"\x05ERROR\x10\x00\x12\v\n" +
	"\aSUCCESS\x10\x012\x93\x02\n" +
	"\vSignService\x12V\n" +
	"\x11getSupportSignWay\x12\x1e.sign.v1.SupportSignWayRequest\x1a\x1f.sign.v1.SupportSignWayResponse\"\x00\x12Z\n" +
	"\x13exportPublicKeyList\x12\x1f.sign.v1.ExportPublicKeyRequest\x1a .sign.v1.ExportPublicKeyResponse\"\x00\x12P\n" +
	"\rsignTxMessage\x12\x1d.sign.v1.SignTxMessageRequest\x1a\x1e.sign.v1.SignTxMessageResponse\"\x00B}\n" +
	"\vcom.sign.v1B\tSignProtoP\x01Z&ebook/cmd/api/proto/gen/sign/v1;signv1\xa2\x02\x03SXX\xaa\x02\aSign.V1\xca\x02\aSign\\V1\xe2\x02\x13Sign\\V1\\GPBMetadata\xea\x02\bSign::V1b\x06proto3"

var (
	file_sign_v1_sign_proto_rawDescOnce sync.Once
	file_sign_v1_sign_proto_rawDescData []byte
)

func file_sign_v1_sign_proto_rawDescGZIP() []byte {
	file_sign_v1_sign_proto_rawDescOnce.Do(func() {
		file_sign_v1_sign_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sign_v1_sign_proto_rawDesc), len(file_sign_v1_sign_proto_rawDesc)))
	})
	return file_sign_v1_sign_proto_rawDescData
}

var file_sign_v1_sign_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sign_v1_sign_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_sign_v1_sign_proto_goTypes = []any{
	(ReturnCode)(0),                 // 0: sign.v1.ReturnCode
	(*PublicKey)(nil),               // 1: sign.v1.PublicKey
	(*SupportSignWayRequest)(nil),   // 2: sign.v1.SupportSignWayRequest
	(*SignWay)(nil),                 // 3: sign.v1.SignWay
	(*SupportSignWayResponse)(nil),  // 4: sign.v1.SupportSignWayResponse
	(*ExportPublicKeyRequest)(nil),  // 5: sign.v1.ExportPublicKeyRequest
	(*ExportPublicKeyResponse)(nil), // 6: sign.v1.ExportPublicKeyResponse
	(*SignTxMessageRequest)(nil),    // 7: sign.v1.SignTxMessageRequest
	(*SignTxMessageResponse)(nil),   // 8: sign.v1.SignTxMessageResponse
}
var file_sign_v1_sign_proto_depIdxs = []int32{
	0, // 0: sign.v1.SupportSignWayResponse.Code:type_name -> sign.v1.ReturnCode
	3, // 1: sign.v1.SupportSignWayResponse.sign_way:type_name -> sign.v1.SignWay
	0, // 2: sign.v1.ExportPublicKeyResponse.Code:type_name -> sign.v1.ReturnCode
	1, // 3: sign.v1.ExportPublicKeyResponse.public_key:type_name -> sign.v1.PublicKey
	0, // 4: sign.v1.SignTxMessageResponse.Code:type_name -> sign.v1.ReturnCode
	2, // 5: sign.v1.SignService.getSupportSignWay:input_type -> sign.v1.SupportSignWayRequest
	5, // 6: sign.v1.SignService.exportPublicKeyList:input_type -> sign.v1.ExportPublicKeyRequest
	7, // 7: sign.v1.SignService.signTxMessage:input_type -> sign.v1.SignTxMessageRequest
	4, // 8: sign.v1.SignService.getSupportSignWay:output_type -> sign.v1.SupportSignWayResponse
	6, // 9: sign.v1.SignService.exportPublicKeyList:output_type -> sign.v1.ExportPublicKeyResponse
	8, // 10: sign.v1.SignService.signTxMessage:output_type -> sign.v1.SignTxMessageResponse
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_sign_v1_sign_proto_init() }
func file_sign_v1_sign_proto_init() {
	if File_sign_v1_sign_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sign_v1_sign_proto_rawDesc), len(file_sign_v1_sign_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sign_v1_sign_proto_goTypes,
		DependencyIndexes: file_sign_v1_sign_proto_depIdxs,
		EnumInfos:         file_sign_v1_sign_proto_enumTypes,
		MessageInfos:      file_sign_v1_sign_proto_msgTypes,
	}.Build()
	File_sign_v1_sign_proto = out.File
	file_sign_v1_sign_proto_goTypes = nil
	file_sign_v1_sign_proto_depIdxs = nil
}
